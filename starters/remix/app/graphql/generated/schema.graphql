"""The schema's entry-point for queries."""
type Query {
  """Load a MediaImage entity by id"""
  mediaImage(
    """The id of the MediaImage to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): MediaImage

  """Load a NodeArticle entity by id"""
  nodeArticle(
    """The id of the NodeArticle to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): NodeArticle

  """Load a NodePage entity by id"""
  nodePage(
    """The id of the NodePage to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): NodePage

  """Load a TermTags entity by id"""
  termTags(
    """The id of the TermTags to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): TermTags

  """Load a ParagraphHero entity by id"""
  paragraphHero(
    """The id of the ParagraphHero to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): ParagraphHero

  """Load a ParagraphAuthor entity by id"""
  paragraphAuthor(
    """The id of the ParagraphAuthor to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): ParagraphAuthor

  """Load a ParagraphCardGroup entity by id"""
  paragraphCardGroup(
    """The id of the ParagraphCardGroup to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): ParagraphCardGroup

  """Load a ParagraphCta entity by id"""
  paragraphCta(
    """The id of the ParagraphCta to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): ParagraphCta

  """Load a ParagraphFaq entity by id"""
  paragraphFaq(
    """The id of the ParagraphFaq to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): ParagraphFaq

  """Load a ParagraphLogo entity by id"""
  paragraphLogo(
    """The id of the ParagraphLogo to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): ParagraphLogo

  """Load a ParagraphLogoGroup entity by id"""
  paragraphLogoGroup(
    """The id of the ParagraphLogoGroup to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): ParagraphLogoGroup

  """Load a ParagraphTestimonial entity by id"""
  paragraphTestimonial(
    """The id of the ParagraphTestimonial to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): ParagraphTestimonial

  """Load a ParagraphViewReference entity by id"""
  paragraphViewReference(
    """The id of the ParagraphViewReference to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): ParagraphViewReference

  """Load a ParagraphWebform entity by id"""
  paragraphWebform(
    """The id of the ParagraphWebform to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): ParagraphWebform

  """Load a Menu by name."""
  menu(
    """Internal menu name. Eg MAIN"""
    name: MenuAvailable!
  ): Menu

  """Load a User entity by id"""
  user(
    """The id of the User to load."""
    id: ID!
  ): User

  """
  Get information about the currently authenticated user. NULL if not logged in.
  """
  viewer: User

  """Schema information."""
  info: SchemaInformation!

  """List of all MediaImage on the platform."""
  mediaImages(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): MediaImageConnection!

  """List of all NodeArticle on the platform."""
  nodeArticles(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): NodeArticleConnection!

  """List of all NodePage on the platform."""
  nodePages(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): NodePageConnection!

  """List of all TermTags on the platform."""
  termTagsItems(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): TermTagsConnection!

  """List of all ParagraphHero on the platform."""
  paragraphHeroes(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphHeroConnection!

  """List of all ParagraphAuthor on the platform."""
  paragraphAuthors(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphAuthorConnection!

  """List of all ParagraphCardGroup on the platform."""
  paragraphCardGroups(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphCardGroupConnection!

  """List of all ParagraphCta on the platform."""
  paragraphCtas(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphCtaConnection!

  """List of all ParagraphFaq on the platform."""
  paragraphFaqs(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphFaqConnection!

  """List of all ParagraphLogoGroup on the platform."""
  paragraphLogoGroups(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphLogoGroupConnection!

  """List of all ParagraphTestimonial on the platform."""
  paragraphTestimonials(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphTestimonialConnection!

  """List of all ParagraphViewReference on the platform."""
  paragraphViewReferences(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphViewReferenceConnection!

  """List of all ParagraphWebform on the platform."""
  paragraphWebforms(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphWebformConnection!

  """List of all User on the platform."""
  users(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): UserConnection!

  """Load a content preview."""
  preview(
    """The content UUID."""
    id: ID!

    """A preview access token."""
    token: String

    """
    Optionally set the response language. Eg en, ja, fr. Setting this langcode
    will change the current language of the entire response.
    """
    langcode: String
  ): NodeUnion

  """Load a Route by path."""
  route(
    """Internal path to load. Eg /about"""
    path: String!
  ): RouteUnion

  """Query for view blog display blog_featured."""
  viewBlogTeaserFeatured(
    """The page number to display."""
    page: Int = 0
  ): ViewBlogTeaserFeaturedResult

  """Query for view blog display blog_teaser."""
  viewBlogTeaser: ViewBlogTeaserResult
}

"""Use local images for reusable media."""
type MediaImage implements MediaInterface & MetaTagInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """Language"""
  langcode: Language!

  """Image"""
  mediaImage: Image!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """Name"""
  name: String!

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!
}

"""Entity type media."""
interface MediaInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """Name"""
  name: String!

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!
}

"""A DateTime object."""
type DateTime {
  """
  Type represents date and time as number of milliseconds from start of the UNIX epoch.
  """
  timestamp: Timestamp!

  """A field whose value exists in the standard IANA Time Zone Database."""
  timezone: TimeZone!

  """A string that will have a value of format ±hh:mm"""
  offset: UtcOffset!

  """RFC 3339 compliant time string."""
  time: Time!
}

"""
Type represents date and time as number of milliseconds from start of the UNIX epoch.
"""
scalar Timestamp

"""A field whose value exists in the standard IANA Time Zone Database."""
scalar TimeZone

"""A string that will have a value of format ±hh:mm"""
scalar UtcOffset

"""RFC 3339 compliant time string."""
scalar Time

"""A language definition provided by the CMS."""
type Language {
  """The language code."""
  id: ID

  """The language name."""
  name: String

  """The language direction."""
  direction: String
}

"""A meta tag element."""
union MetaTagUnion = MetaTagLink | MetaTagValue | MetaTagProperty | MetaTagScript

"""A meta link element."""
type MetaTagLink implements MetaTag {
  """The HTML tag for this meta element."""
  tag: String!

  """The meta tag element attributes."""
  attributes: MetaTagLinkAttributes!
}

"""A meta tag element."""
interface MetaTag {
  """The HTML tag for this meta element."""
  tag: String!
}

"""A meta link element's attributes."""
type MetaTagLinkAttributes {
  """Specifies the location of the linked document."""
  href: String

  """Specifies the location of the linked document."""
  hreflang: String

  """
  Specifies the relationship between the current document and the linked document.
  """
  rel: String

  """Specifies on what device the linked document will be displayed."""
  media: String

  """Specifies the size of the linked resource. Only for rel="icon"."""
  sizes: String

  """Specifies the media type of the linked document."""
  type: String
}

"""A meta content element."""
type MetaTagValue implements MetaTag {
  """The HTML tag for this meta element."""
  tag: String!

  """The meta tag element attributes."""
  attributes: MetaTagValueAttributes!
}

"""A meta content element's attributes."""
type MetaTagValueAttributes {
  """The name attribute of the meta tag."""
  name: String

  """The content attribute of the meta tag."""
  content: String
}

"""A meta property element."""
type MetaTagProperty implements MetaTag {
  """The HTML tag for this meta element."""
  tag: String!

  """The meta tag element attributes."""
  attributes: MetaTagPropertyAttributes!
}

"""A meta property element's attributes."""
type MetaTagPropertyAttributes {
  """The property attribute of the meta tag."""
  property: String

  """The content attribute of the meta tag."""
  content: String
}

"""A meta script element."""
type MetaTagScript implements MetaTag {
  """The HTML tag for this meta element."""
  tag: String!

  """The meta tag element attributes."""
  attributes: MetaTagScriptAttributes!

  """The content of the script tag."""
  content: String
}

"""A meta script element's attributes."""
type MetaTagScriptAttributes {
  """The type attribute of the script tag."""
  type: String

  """The src attribute of the script tag."""
  src: String

  """The integrity attribute of the script tag."""
  integrity: String
}

"""This entity has meta tags enabled."""
interface MetaTagInterface {
  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!
}

"""This entity is accessible over an Edge connection."""
interface EdgeNode {
  id: ID!
}

"""A image object to represent an managed file."""
type Image {
  """The URL of the image."""
  url: String!

  """The width of the image."""
  width: Int!

  """The height of the image."""
  height: Int!

  """The alt text of the image."""
  alt: String

  """The title text of the image."""
  title: String

  """The size of the image in bytes."""
  size: Int!

  """The mime type of the image."""
  mime: String

  """Image variations control different sizes and formats for images."""
  variations(styles: [ImageStyleAvailable]): [ImageStyleDerivative!]
}

"""List of image styles available to use."""
enum ImageStyleAvailable {
  """No image styles have been enabled."""
  UNDEFINED
}

"""ImageStyle derivatives for an Image."""
type ImageStyleDerivative {
  name: String!
  url: String!
  width: Int!
  height: Int!
}

"""
Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.
"""
type NodeArticle implements NodeInterface & MetaTagInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The author of this content."""
  author: User

  """Body"""
  body: TextSummary!

  """The time that the node was last edited."""
  changed: DateTime!

  """The date and time that the content was created."""
  created: DateTime!

  """Image"""
  image: MediaUnion!

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """URL alias"""
  path: String!

  """Promoted to front page"""
  promote: Boolean!

  """Published"""
  status: Boolean!

  """Sticky at top of lists"""
  sticky: Boolean!

  """Summary"""
  summary: String!

  """
  Enter a comma-separated list. For example: Amsterdam, Mexico City, "Cleveland, Ohio"
  """
  tags: [TermUnion!]

  """Title"""
  title: String!
}

"""Entity type node."""
interface NodeInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The author of this content."""
  author: User

  """The time that the node was last edited."""
  changed: DateTime!

  """The date and time that the content was created."""
  created: DateTime!

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """URL alias"""
  path: String!

  """Promoted to front page"""
  promote: Boolean!

  """Published"""
  status: Boolean!

  """Sticky at top of lists"""
  sticky: Boolean!

  """Title"""
  title: String!
}

"""Entity type user."""
type User implements UserInterface & MetaTagInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the user was last edited."""
  changed: DateTime!

  """The time that the user was created."""
  created: DateTime!

  """The email of this user."""
  mail: Email

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """The name of this user."""
  name: String!

  """URL alias"""
  path: String!

  """Picture"""
  picture: MediaUnion

  """The roles the user has."""
  roles: [UserRoles!]

  """Whether the user is active or blocked."""
  status: UserStatus!
}

"""Entity type user."""
interface UserInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the user was last edited."""
  changed: DateTime!

  """The time that the user was created."""
  created: DateTime!

  """The email of this user."""
  mail: Email

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """The name of this user."""
  name: String!

  """URL alias"""
  path: String!

  """The roles the user has."""
  roles: [UserRoles!]

  """Whether the user is active or blocked."""
  status: UserStatus!
}

"""An email address."""
scalar Email

"""User roles."""
scalar UserRoles

"""Whether the user is active or blocked."""
enum UserStatus {
  """An active user is able to login on the platform and view content"""
  ACTIVE

  """
  A blocked user is unable to access the platform, although their content will still be visible until it's deleted.
  """
  BLOCKED
}

"""Entity type media."""
union MediaUnion = MediaImage

"""A processed text format with summary defined by the CMS."""
type TextSummary {
  """The raw text value."""
  value: String

  """The processed text value."""
  processed: Html

  """The text format used to process the text value."""
  format: String

  """The processed text summary."""
  summary: Html
}

"""
An HTML string

Content of this type is deemed safe by the server for raw output given the
origin and the context of its usage. The HTML can still contain scripts or style
tags where the creating user had permission to input these.
"""
scalar Html

"""Entity type taxonomy_term."""
union TermUnion = TermTags

"""Use tags to group articles on similar topics into categories."""
type TermTags implements TermInterface & MetaTagInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the term was last edited."""
  changed: DateTime!

  """Description"""
  description: Text!

  """The term language code."""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """Name"""
  name: String!

  """The parents of this term."""
  parent: TermUnion

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!

  """The weight of this term in relation to other terms."""
  weight: Int!
}

"""Entity type taxonomy_term."""
interface TermInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the term was last edited."""
  changed: DateTime!

  """Description"""
  description: Text!

  """The term language code."""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """Name"""
  name: String!

  """The parents of this term."""
  parent: TermUnion

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!

  """The weight of this term in relation to other terms."""
  weight: Int!
}

"""A processed text format defined by the CMS."""
type Text {
  """The raw text value."""
  value: String

  """The processed text value."""
  processed: Html

  """The text format used to process the text value."""
  format: String
}

"""
Use <em>basic pages</em> for your static content, such as an 'About us' page.
"""
type NodePage implements NodeInterface & MetaTagInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The author of this content."""
  author: User

  """The time that the node was last edited."""
  changed: DateTime!

  """Components"""
  components: [ParagraphUnion!]

  """The date and time that the content was created."""
  created: DateTime!

  """Image"""
  image: MediaUnion!

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """URL alias"""
  path: String!

  """Promoted to front page"""
  promote: Boolean!

  """Show Title"""
  showTitle: Boolean

  """Published"""
  status: Boolean!

  """Sticky at top of lists"""
  sticky: Boolean!

  """Summary"""
  summary: String!

  """Title"""
  title: String!
}

"""Entity type paragraph."""
union ParagraphUnion = ParagraphHero | ParagraphAuthor | ParagraphCardGroup | ParagraphCta | ParagraphFaq | ParagraphLogo | ParagraphLogoGroup | ParagraphQuestion | ParagraphSimpleCard | ParagraphTestimonial | ParagraphViewReference | ParagraphWebform

"""Entity type paragraph."""
type ParagraphHero implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Actions"""
  actions: [Link!]

  """The time that the Paragraph was created."""
  created: DateTime!

  """Description"""
  description: String!

  """Heading"""
  heading: String!

  """Image"""
  image: MediaUnion!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!
}

"""Entity type paragraph."""
interface ParagraphInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!
}

"""A link."""
type Link {
  """The title of the link."""
  title: String

  """The URL of the link."""
  url: String

  """Whether the link is internal to this website."""
  internal: Boolean!
}

"""Entity type paragraph."""
type ParagraphAuthor implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Company"""
  company: String!

  """The time that the Paragraph was created."""
  created: DateTime!

  """Avatar"""
  image: MediaUnion!

  """The paragraphs entity language code."""
  langcode: Language!

  """Name"""
  name: String!

  """Position"""
  position: String!

  """Published"""
  status: Boolean!
}

"""Entity type paragraph."""
type ParagraphCardGroup implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """Description"""
  description: String

  """Heading"""
  heading: String!

  """Items"""
  items: [ParagraphUnion!]!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!

  """Subheading"""
  subheading: String
}

"""Entity type paragraph."""
type ParagraphCta implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Actions"""
  actions: [Link!]

  """The time that the Paragraph was created."""
  created: DateTime!

  """Description"""
  description: String!

  """Heading"""
  heading: String!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!

  """Subheading"""
  subheading: String
}

"""Entity type paragraph."""
type ParagraphFaq implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """Description"""
  description: String

  """Heading"""
  heading: String!

  """Items"""
  items: [ParagraphUnion!]!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!
}

"""Entity type paragraph."""
type ParagraphLogo implements ParagraphInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """Image"""
  image: MediaUnion!

  """The paragraphs entity language code."""
  langcode: Language!

  """Link"""
  link: Link!

  """Published"""
  status: Boolean!
}

"""Entity type paragraph."""
type ParagraphLogoGroup implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """Heading"""
  heading: String!

  """Items"""
  items: [ParagraphUnion!]!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!
}

"""Entity type paragraph."""
type ParagraphQuestion implements ParagraphInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Answer"""
  answer: Text!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Question"""
  question: String!

  """Published"""
  status: Boolean!
}

"""Entity type paragraph."""
type ParagraphSimpleCard implements ParagraphInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """Description"""
  description: String!

  """Heading"""
  heading: String!

  """Image"""
  image: MediaUnion!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!
}

"""Entity type paragraph."""
type ParagraphTestimonial implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Author"""
  author: ParagraphUnion!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Quote"""
  quote: String!

  """Published"""
  status: Boolean!
}

"""Entity type paragraph."""
type ParagraphViewReference implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """Description"""
  description: String

  """Heading"""
  heading: String

  """The paragraphs entity language code."""
  langcode: Language!

  """Action"""
  link: Link

  """
  This is a viewfield query proxy. Page size and contextual filters are applied
  within the CMS. See the actual view base query for more documentation on
  filters and options available. Reference
  """
  reference(
    """If enabled: The page number to display."""
    page: Int

    """If enabled: The number of items skipped from beginning of this view."""
    offset: Int

    """
    If enabled: The filters to apply to this view. Filters may not apply unless exposed.
    """
    filter: [KeyValueInput]

    """If enabled: Sort the view by this key."""
    sortKey: String

    """If enabled: Sort the view direction."""
    sortDir: SortDirection
  ): ViewResultUnion!

  """Published"""
  status: Boolean!

  """Subheading"""
  subheading: String
}

"""Generic input for key-value pairs."""
input KeyValueInput {
  key: String!
  value: String
}

"""Sort direction."""
enum SortDirection {
  """Ascending"""
  ASC

  """Descending"""
  DESC
}

"""All available view result types."""
union ViewResultUnion = ViewBlogTeaserFeaturedResult | ViewBlogTeaserResult

"""Result for view blog display blog_featured."""
type ViewBlogTeaserFeaturedResult implements View {
  """The ID of the view."""
  id: ID!

  """The machine name of the view."""
  view: String!

  """The machine name of the display."""
  display: String!

  """The language code of the view."""
  langcode: String

  """The human friendly label of the view."""
  label: String

  """The description of the view."""
  description: String

  """Information about the page in the view."""
  pageInfo: ViewPageInfo!

  """The results of the view."""
  results: [NodeUnion!]!
}

"""Views represent collections of curated data from the CMS."""
interface View {
  """The ID of the view."""
  id: ID!

  """The machine name of the view."""
  view: String!

  """The machine name of the display."""
  display: String!

  """The language code of the view."""
  langcode: String

  """The human friendly label of the view."""
  label: String

  """The description of the view."""
  description: String

  """Information about the page in the view."""
  pageInfo: ViewPageInfo!
}

"""Information about the page in a view."""
type ViewPageInfo {
  """Any result offset being used."""
  offset: Int!

  """The current page being returned."""
  page: Int!

  """How many results per page."""
  pageSize: Int!

  """How many results total."""
  total: Int!
}

"""Entity type node."""
union NodeUnion = NodeArticle | NodePage

"""Result for view blog display blog_teaser."""
type ViewBlogTeaserResult implements View {
  """The ID of the view."""
  id: ID!

  """The machine name of the view."""
  view: String!

  """The machine name of the display."""
  display: String!

  """The language code of the view."""
  langcode: String

  """The human friendly label of the view."""
  label: String

  """The description of the view."""
  description: String

  """Information about the page in the view."""
  pageInfo: ViewPageInfo!

  """The results of the view."""
  results: [NodeUnion!]!
}

"""Entity type paragraph."""
type ParagraphWebform implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """Description"""
  description: String

  """Form"""
  form: String!

  """Heading"""
  heading: String!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!

  """Subheading"""
  subheading: String
}

"""List of menus available to load."""
enum MenuAvailable {
  """Footer"""
  FOOTER

  """Main navigation"""
  MAIN
}

"""Entity type menu."""
type Menu implements MenuInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The menu items."""
  items: [MenuItem!]!

  """The menu name."""
  name: String!
}

"""Entity type menu."""
interface MenuInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The menu items."""
  items: [MenuItem!]!

  """The menu name."""
  name: String!
}

"""A menu item defined in the CMS."""
type MenuItem {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The title of the menu item."""
  title: String!

  """The description of the menu item."""
  description: String

  """The URL of the menu item."""
  url: String

  """The language of the menu item."""
  langcode: Language!

  """Whether this menu item links to an internal route."""
  internal: Boolean!

  """Whether this menu item is intended to be expanded."""
  expanded: Boolean!

  """Attributes of this menu item."""
  attributes: MenuItemAttributes!

  """Child menu items of this menu item."""
  children: [MenuItem!]!

  """
  The route this menu item uses. Route loading can be disabled per menu type.
  """
  route: RouteUnion
}

"""Menu item options set within the CMS."""
type MenuItemAttributes {
  class: String
}

"""Route types that can exist in the system."""
union RouteUnion = RouteInternal | RouteExternal | RouteRedirect

"""Route within this website."""
type RouteInternal implements Route {
  """URL of this route."""
  url: String!

  """Whether this route is internal or external."""
  internal: Boolean!

  """Breadcrumb links for this route."""
  breadcrumbs: [Link!]

  """Content assigned to this route."""
  entity: RouteEntityUnion
}

"""Routes represent incoming requests that resolve to content."""
interface Route {
  """URL of this route."""
  url: String!

  """Whether this route is internal or external."""
  internal: Boolean!
}

"""A list of possible entities that can be returned by URL."""
union RouteEntityUnion = MediaImage | NodeArticle | NodePage | TermTags

"""Route outside of this website."""
type RouteExternal implements Route {
  """URL of this route."""
  url: String!

  """Whether this route is internal or external."""
  internal: Boolean!
}

"""Redirect to another URL with status."""
type RouteRedirect implements Route {
  """URL of this route."""
  url: String!

  """Whether this route is internal or external."""
  internal: Boolean!

  """Suggested status for redirect. Eg 301."""
  status: Int!

  """Utility prop. Always true for redirects."""
  redirect: Boolean!
}

"""Schema information provided by the system."""
type SchemaInformation {
  """The schema description."""
  description: String

  """The schema version."""
  version: String

  """List of fragments available."""
  fragments: [SchemaFragment!]!
}

"""A fragment representing a type within the schema."""
type SchemaFragment {
  """The scheme type of the fragment."""
  type: String!

  """The name of the fragment."""
  name: String!

  """The base graphql type."""
  class: String!

  """The fragment content."""
  content: String
}

"""A cursor for use in pagination."""
scalar Cursor

"""Choose how your sorts will occur and on which field."""
enum ConnectionSortKeys {
  """Sort by creation date"""
  CREATED_AT

  """Sort by updated date"""
  UPDATED_AT

  """Sort by entity title."""
  TITLE

  """Sort by sticky status."""
  STICKY

  """Sort by promoted status."""
  PROMOTED

  """Sort by term weight."""
  WEIGHT
}

"""A paginated set of results for MediaImage."""
type MediaImageConnection implements Connection {
  edges: [MediaImageEdge!]!
  nodes: [MediaImage!]!
  pageInfo: ConnectionPageInfo!
}

"""A paginated set of results."""
interface Connection {
  """The edges of this connection."""
  edges: [Edge!]!

  """The nodes of the edges of this connection."""
  nodes: [EdgeNode!]!

  """Information to aid in pagination."""
  pageInfo: ConnectionPageInfo!
}

"""
An edge in a connection.
Provides the cursor to fetch data based on the position of the associated
node. Specific edge implementations may provide more information about the
relationship they represent.
"""
interface Edge {
  cursor: Cursor!
  node: EdgeNode!
}

"""Information about the page in a connection."""
type ConnectionPageInfo {
  """Whether there are more pages in this connection."""
  hasNextPage: Boolean!

  """Whether there are previous pages in this connection."""
  hasPreviousPage: Boolean!

  """The cursor for the first element in this page."""
  startCursor: Cursor

  """The cursor for the last element in this page."""
  endCursor: Cursor
}

"""Edge for MediaImage."""
type MediaImageEdge implements Edge {
  cursor: Cursor!
  node: MediaImage!
}

"""A paginated set of results for NodeArticle."""
type NodeArticleConnection implements Connection {
  edges: [NodeArticleEdge!]!
  nodes: [NodeArticle!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for NodeArticle."""
type NodeArticleEdge implements Edge {
  cursor: Cursor!
  node: NodeArticle!
}

"""A paginated set of results for NodePage."""
type NodePageConnection implements Connection {
  edges: [NodePageEdge!]!
  nodes: [NodePage!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for NodePage."""
type NodePageEdge implements Edge {
  cursor: Cursor!
  node: NodePage!
}

"""A paginated set of results for TermTags."""
type TermTagsConnection implements Connection {
  edges: [TermTagsEdge!]!
  nodes: [TermTags!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for TermTags."""
type TermTagsEdge implements Edge {
  cursor: Cursor!
  node: TermTags!
}

"""A paginated set of results for ParagraphHero."""
type ParagraphHeroConnection implements Connection {
  edges: [ParagraphHeroEdge!]!
  nodes: [ParagraphHero!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphHero."""
type ParagraphHeroEdge implements Edge {
  cursor: Cursor!
  node: ParagraphHero!
}

"""A paginated set of results for ParagraphAuthor."""
type ParagraphAuthorConnection implements Connection {
  edges: [ParagraphAuthorEdge!]!
  nodes: [ParagraphAuthor!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphAuthor."""
type ParagraphAuthorEdge implements Edge {
  cursor: Cursor!
  node: ParagraphAuthor!
}

"""A paginated set of results for ParagraphCardGroup."""
type ParagraphCardGroupConnection implements Connection {
  edges: [ParagraphCardGroupEdge!]!
  nodes: [ParagraphCardGroup!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphCardGroup."""
type ParagraphCardGroupEdge implements Edge {
  cursor: Cursor!
  node: ParagraphCardGroup!
}

"""A paginated set of results for ParagraphCta."""
type ParagraphCtaConnection implements Connection {
  edges: [ParagraphCtaEdge!]!
  nodes: [ParagraphCta!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphCta."""
type ParagraphCtaEdge implements Edge {
  cursor: Cursor!
  node: ParagraphCta!
}

"""A paginated set of results for ParagraphFaq."""
type ParagraphFaqConnection implements Connection {
  edges: [ParagraphFaqEdge!]!
  nodes: [ParagraphFaq!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphFaq."""
type ParagraphFaqEdge implements Edge {
  cursor: Cursor!
  node: ParagraphFaq!
}

"""A paginated set of results for ParagraphLogoGroup."""
type ParagraphLogoGroupConnection implements Connection {
  edges: [ParagraphLogoGroupEdge!]!
  nodes: [ParagraphLogoGroup!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphLogoGroup."""
type ParagraphLogoGroupEdge implements Edge {
  cursor: Cursor!
  node: ParagraphLogoGroup!
}

"""A paginated set of results for ParagraphTestimonial."""
type ParagraphTestimonialConnection implements Connection {
  edges: [ParagraphTestimonialEdge!]!
  nodes: [ParagraphTestimonial!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphTestimonial."""
type ParagraphTestimonialEdge implements Edge {
  cursor: Cursor!
  node: ParagraphTestimonial!
}

"""A paginated set of results for ParagraphViewReference."""
type ParagraphViewReferenceConnection implements Connection {
  edges: [ParagraphViewReferenceEdge!]!
  nodes: [ParagraphViewReference!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphViewReference."""
type ParagraphViewReferenceEdge implements Edge {
  cursor: Cursor!
  node: ParagraphViewReference!
}

"""A paginated set of results for ParagraphWebform."""
type ParagraphWebformConnection implements Connection {
  edges: [ParagraphWebformEdge!]!
  nodes: [ParagraphWebform!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphWebform."""
type ParagraphWebformEdge implements Edge {
  cursor: Cursor!
  node: ParagraphWebform!
}

"""A paginated set of results for User."""
type UserConnection implements Connection {
  edges: [UserEdge!]!
  nodes: [User!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for User."""
type UserEdge implements Edge {
  cursor: Cursor!
  node: User!
}

"""The schema's entry-point for mutations."""
type Mutation {
  """Placeholder for mutation extension."""
  _: Boolean!
}

"""The schema's entry-point for subscriptions."""
type Subscription {
  """Placeholder for subscription extension."""
  _: Boolean!
}

"""A file object to represent an managed file."""
type File {
  """The name of the file."""
  name: String

  """The URL of the file."""
  url: String!

  """The size of the file in bytes."""
  size: Int!

  """The mime type of the file."""
  mime: String

  """The description of the file."""
  description: String
}

"""Entity type image_style."""
type ImageStyle implements ImageStyleInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!
  name: String!
}

"""Entity type image_style."""
interface ImageStyleInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!
  name: String!
}

"""Entity type image_style."""
union ImageStyleUnion = ImageStyle

"""Entity type menu."""
union MenuUnion = Menu

"""A field whose value conforms to the standard E.164"""
scalar PhoneNumber

"""
Unsupported entity or field type in the schema.
This entity may not have been enabled in the schema yet and is being referenced via entity reference.
"""
type UnsupportedType {
  """Unsupported type, always TRUE."""
  unsupported: Boolean
}

"""Untyped structured data. Eg JSON, configuration, settings, attributes."""
scalar UntypedStructuredData

"""Entity type user."""
union UserUnion = User

"""An exposed filter option for the view."""
type ViewFilter {
  """The filter identifier."""
  id: ID!

  """The filter plugin type."""
  plugin: String!

  """The filter field type."""
  type: String!

  """The filter element label."""
  label: String

  """The filter element description."""
  description: String

  """Whether the filter is required."""
  required: Boolean!

  """Whether the filter allows multiple values."""
  multiple: Boolean!

  """The value for the filter. Could be an array for multiple values."""
  value: UntypedStructuredData

  """The filter element options if any are defined."""
  options: UntypedStructuredData

  """The filter element attributes."""
  attributes: UntypedStructuredData!
}

"""A reference to an embedded view"""
type ViewReference {
  """The machine name of the view."""
  view: String!

  """The machine name of the display."""
  display: String!

  """The contextual filter values used."""
  contextualFilter: [String!]

  """How many results per page."""
  pageSize: Int

  """
  The name of the query used to fetch the data, if the view is a GraphQL display.
  """
  query: String
}